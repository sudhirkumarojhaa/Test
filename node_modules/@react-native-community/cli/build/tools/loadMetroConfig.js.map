{"version":3,"sources":["../../src/tools/loadMetroConfig.ts"],"names":["INTERNAL_CALLSITES_REGEX","RegExp","join","getDefaultConfig","ctx","resolver","resolverMainFields","platforms","Object","keys","serializer","getModulesRunBeforeMainModule","require","resolve","path","reactNativePath","getPolyfills","server","port","Number","process","env","RCT_METRO_PORT","symbolicator","customizeFrame","frame","collapse","Boolean","file","test","transformer","babelTransformerPath","assetRegistryPath","watchFolders","load","options","defaultConfig","reporter","cwd","root"],"mappings":";;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;AAGA,MAAMA,wBAAwB,GAAG,IAAIC,MAAJ,CAC/B,CACE,8CADF,EAEE,6CAFF,EAGE,+BAHF,EAIE,4BAJF,EAKE,iCALF,EAME,4CANF,EAOE,sCAPF,EAQE,kCARF,EASEC,IATF,CASO,GATP,CAD+B,CAAjC;;AAsCA;;;AAGO,MAAMC,gBAAgB,GAAIC,GAAD,IAA8B;AAC5D,SAAO;AACLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,kBAAkB,EAAE,CAAC,cAAD,EAAiB,SAAjB,EAA4B,MAA5B,CADZ;AAERC,MAAAA,SAAS,EAAE,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYL,GAAG,CAACG,SAAhB,CAAJ,EAAgC,QAAhC;AAFH,KADL;AAKLG,IAAAA,UAAU,EAAE;AACVC,MAAAA,6BAA6B,EAAE,MAAM,CACnCC,OAAO,CAACC,OAAR,CACEC,gBAAKZ,IAAL,CAAUE,GAAG,CAACW,eAAd,EAA+B,+BAA/B,CADF,CADmC,CAD3B;AAMVC,MAAAA,YAAY,EAAE,MACZJ,OAAO,CAACE,gBAAKZ,IAAL,CAAUE,GAAG,CAACW,eAAd,EAA+B,kBAA/B,CAAD,CAAP;AAPQ,KALP;AAcLE,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEC,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAb,CAAN,IAAsC;AADtC,KAdH;AAiBLC,IAAAA,YAAY,EAAE;AACZC,MAAAA,cAAc,EAAGC,KAAD,IAAkC;AAChD,cAAMC,QAAQ,GAAGC,OAAO,CACtBF,KAAK,CAACG,IAAN,IAAc5B,wBAAwB,CAAC6B,IAAzB,CAA8BJ,KAAK,CAACG,IAApC,CADQ,CAAxB;AAGA,eAAO;AAACF,UAAAA;AAAD,SAAP;AACD;AANW,KAjBT;AAyBLI,IAAAA,WAAW,EAAE;AACXC,MAAAA,oBAAoB,EAAEnB,OAAO,CAACC,OAAR,CACpB,sCADoB,CADX;AAIXmB,MAAAA,iBAAiB,EAAElB,gBAAKZ,IAAL,CACjBE,GAAG,CAACW,eADa,EAEjB,+BAFiB;AAJR,KAzBR;AAkCLkB,IAAAA,YAAY,EAAE;AAlCT,GAAP;AAoCD,CArCM;;;;AAkDP;;;;;AAKe,SAASC,IAAT,CACb9B,GADa,EAEb+B,OAFa,EAGS;AACtB,QAAMC,aAAa,GAAGjC,gBAAgB,CAACC,GAAD,CAAtC;;AACA,MAAI+B,OAAO,IAAIA,OAAO,CAACE,QAAvB,EAAiC;AAC/BD,IAAAA,aAAa,CAACC,QAAd,GAAyBF,OAAO,CAACE,QAAjC;AACD;;AACD,SAAO;AAAYC,IAAAA,GAAG,EAAElC,GAAG,CAACmC;AAArB,KAA8BJ,OAA9B,GAAwCC,aAAxC,CAAP;AACD","sourcesContent":["/**\n * Configuration file of Metro.\n */\nimport path from 'path';\n// @ts-ignore - no typed definition for the package\nimport {loadConfig} from 'metro-config';\nimport {Config} from '@react-native-community/cli-types';\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    '/Libraries/Renderer/implementations/.+\\\\.js$',\n    '/Libraries/BatchedBridge/MessageQueue\\\\.js$',\n    '/Libraries/YellowBox/.+\\\\.js$',\n    '/Libraries/LogBox/.+\\\\.js$',\n    '/Libraries/Core/Timers/.+\\\\.js$',\n    '/node_modules/react-devtools-core/.+\\\\.js$',\n    '/node_modules/react-refresh/.+\\\\.js$',\n    '/node_modules/scheduler/.+\\\\.js$',\n  ].join('|'),\n);\n\nexport interface MetroConfig {\n  resolver: {\n    resolverMainFields: string[];\n    platforms: string[];\n  };\n  serializer: {\n    getModulesRunBeforeMainModule: () => string[];\n    getPolyfills: () => any;\n  };\n  server: {\n    port: number;\n    enhanceMiddleware?: Function;\n  };\n  symbolicator: {\n    customizeFrame: (frame: {file: string | null}) => {collapse: boolean};\n  };\n  transformer: {\n    babelTransformerPath: string;\n    assetRegistryPath: string;\n    assetPlugins?: Array<string>;\n  };\n  watchFolders: string[];\n  reporter?: any;\n}\n\n/**\n * Default configuration\n */\nexport const getDefaultConfig = (ctx: Config): MetroConfig => {\n  return {\n    resolver: {\n      resolverMainFields: ['react-native', 'browser', 'main'],\n      platforms: [...Object.keys(ctx.platforms), 'native'],\n    },\n    serializer: {\n      getModulesRunBeforeMainModule: () => [\n        require.resolve(\n          path.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore'),\n        ),\n      ],\n      getPolyfills: () =>\n        require(path.join(ctx.reactNativePath, 'rn-get-polyfills'))(),\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081,\n    },\n    symbolicator: {\n      customizeFrame: (frame: {file: string | null}) => {\n        const collapse = Boolean(\n          frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file),\n        );\n        return {collapse};\n      },\n    },\n    transformer: {\n      babelTransformerPath: require.resolve(\n        'metro-react-native-babel-transformer',\n      ),\n      assetRegistryPath: path.join(\n        ctx.reactNativePath,\n        'Libraries/Image/AssetRegistry',\n      ),\n    },\n    watchFolders: [],\n  };\n};\n\nexport interface ConfigOptionsT {\n  maxWorkers?: number;\n  port?: number;\n  projectRoot?: string;\n  resetCache?: boolean;\n  watchFolders?: string[];\n  sourceExts?: string[];\n  reporter?: any;\n  config?: string;\n}\n\n/**\n * Loads Metro Config and applies `options` on top of the resolved config.\n *\n * This allows the CLI to always overwrite the file settings.\n */\nexport default function load(\n  ctx: Config,\n  options?: ConfigOptionsT,\n): Promise<MetroConfig> {\n  const defaultConfig = getDefaultConfig(ctx);\n  if (options && options.reporter) {\n    defaultConfig.reporter = options.reporter;\n  }\n  return loadConfig({cwd: ctx.root, ...options}, defaultConfig);\n}\n"]}