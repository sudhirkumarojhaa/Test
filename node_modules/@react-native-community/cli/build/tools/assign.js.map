{"version":3,"sources":["../../src/tools/assign.ts"],"names":["assign","target","sources","forEach","source","descriptors","Object","keys","reduce","acc","key","propertyDescriptor","getOwnPropertyDescriptor","undefined","getOwnPropertySymbols","sym","descriptor","enumerable","toString","defineProperties"],"mappings":";;;;;;;AAAA;;;;;;;AAOe,SAASA,MAAT,CAAgBC,MAAhB,EAAgC,GAAGC,OAAnC,EAAsD;AACnEA,EAAAA,OAAO,CAACC,OAAR,CAAgBC,MAAM,IAAI;AACxB,QAAIC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CAChB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACZ,YAAMC,kBAAkB,GAAGL,MAAM,CAACM,wBAAP,CAAgCR,MAAhC,EAAwCM,GAAxC,CAA3B;;AACA,UAAIC,kBAAkB,KAAKE,SAA3B,EAAsC;AACpCJ,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,kBAAX;AACD;;AACD,aAAOF,GAAP;AACD,KAPe,EAQhB,EARgB,CAAlB,CADwB,CAWxB;;AACAH,IAAAA,MAAM,CAACQ,qBAAP,CAA6BV,MAA7B,EAAqCD,OAArC,CAA6CY,GAAG,IAAI;AAClD,UAAIC,UAAU,GAAGV,MAAM,CAACM,wBAAP,CAAgCR,MAAhC,EAAwCW,GAAxC,CAAjB;;AACA,UAAIC,UAAU,IAAIA,UAAU,CAACC,UAA7B,EAAyC;AACvCZ,QAAAA,WAAW,CAACU,GAAG,CAACG,QAAJ,EAAD,CAAX,GAA8BF,UAA9B;AACD;AACF,KALD;AAMAV,IAAAA,MAAM,CAACa,gBAAP,CAAwBlB,MAAxB,EAAgCI,WAAhC;AACD,GAnBD;AAoBA,SAAOJ,MAAP;AACD","sourcesContent":["/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n *\n * Similar to Object.assign(), but it doesn't execute getters. This allows us to have\n * lazy properties on an object and still be able to merge them together\n *\n */\nexport default function assign(target: Object, ...sources: Object[]) {\n  sources.forEach(source => {\n    let descriptors = Object.keys(source).reduce(\n      (acc, key) => {\n        const propertyDescriptor = Object.getOwnPropertyDescriptor(source, key);\n        if (propertyDescriptor !== undefined) {\n          acc[key] = propertyDescriptor;\n        }\n        return acc;\n      },\n      {} as PropertyDescriptorMap,\n    );\n    // by default, Object.assign copies enumerable Symbols too\n    Object.getOwnPropertySymbols(source).forEach(sym => {\n      let descriptor = Object.getOwnPropertyDescriptor(source, sym);\n      if (descriptor && descriptor.enumerable) {\n        descriptors[sym.toString()] = descriptor;\n      }\n    });\n    Object.defineProperties(target, descriptors);\n  });\n  return target;\n}\n"]}