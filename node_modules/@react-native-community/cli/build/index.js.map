{"version":3,"sources":["../src/index.ts"],"names":["pkgJson","require","commander","usage","option","arguments","action","cmd","printUnknownCommand","process","exit","handleError","err","verbose","logger","error","message","replace","chalk","dim","reset","stack","log","printHelpInformation","examples","pkg","cmdName","_name","argsList","_args","map","arg","required","name","join","_alias","sourceInformation","bold","version","output","_description","optionHelp","length","formattedUsage","example","desc","cyan","concat","availableCommands","commands","suggestion","find","errorMsg","info","outputHelp","isDetachedCommand","command","detached","attachCommand","rest","options","handleAction","args","passedOptions","opts","argv","Array","from","slice","func","description","helpInformation","bind","opt","parse","val","default","run","setupAndRun","e","setVerbose","includes","platform","scriptName","absolutePath","path","__dirname","childProcess","execFileSync","stdio","warn","red","detachedCommands","disable","ctx","enable","projectCommands","debug","rawArgs","console","bin","resolve"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport childProcess from 'child_process';\nimport commander from 'commander';\nimport leven from 'leven';\nimport path from 'path';\n\nimport {Command, Config} from '@react-native-community/cli-types';\nimport {logger} from '@react-native-community/cli-tools';\n\nimport {detachedCommands, projectCommands} from './commands';\nimport init from './commands/init/initCompat';\nimport assertRequiredOptions from './tools/assertRequiredOptions';\nimport loadConfig from './tools/config';\n\nconst pkgJson = require('../package.json');\n\ncommander\n  .usage('<command> [options]')\n  .option('--version', 'Print CLI version')\n  .option('--verbose', 'Increase logging verbosity');\n\ncommander.arguments('<command>').action(cmd => {\n  printUnknownCommand(cmd);\n  process.exit(1);\n});\n\nconst handleError = (err: Error) => {\n  if (commander.verbose) {\n    logger.error(err.message);\n  } else {\n    // Some error messages (esp. custom ones) might have `.` at the end already.\n    const message = err.message.replace(/\\.$/, '');\n    logger.error(\n      `${message}. ${chalk.dim(\n        `Run CLI with ${chalk.reset('--verbose')} ${chalk.dim(\n          'flag for more details.',\n        )}`,\n      )}`,\n    );\n  }\n  if (err.stack) {\n    logger.log(chalk.dim(err.stack));\n  }\n  process.exit(1);\n};\n\n/**\n * Custom printHelpInformation command inspired by internal Commander.js\n * one modified to suit our needs\n */\nfunction printHelpInformation(\n  this: commander.Command,\n  examples: Command['examples'],\n  pkg: Command['pkg'],\n) {\n  let cmdName = this._name;\n  const argsList = (this._args as Array<{required: boolean; name: string}>)\n    .map(arg => (arg.required ? `<${arg.name}>` : `[${arg.name}]`))\n    .join(' ');\n\n  if (this._alias) {\n    cmdName = `${cmdName}|${this._alias}`;\n  }\n\n  const sourceInformation = pkg\n    ? [`${chalk.bold('Source:')} ${pkg.name}@${pkg.version}`, '']\n    : [];\n\n  let output = [\n    chalk.bold(`react-native ${cmdName} ${argsList}`),\n    this._description ? `\\n${this._description}\\n` : '',\n    ...sourceInformation,\n    `${chalk.bold('Options:')}`,\n    this.optionHelp().replace(/^/gm, '  '),\n  ];\n\n  if (examples && examples.length > 0) {\n    const formattedUsage = examples\n      .map(example => `  ${example.desc}: \\n  ${chalk.cyan(example.cmd)}`)\n      .join('\\n\\n');\n\n    output = output.concat([chalk.bold('\\nExample usage:'), formattedUsage]);\n  }\n\n  return output.join('\\n').concat('\\n');\n}\n\nfunction printUnknownCommand(cmdName: string) {\n  const availableCommands = commander.commands.map((cmd: any) => cmd._name);\n  const suggestion = availableCommands.find((cmd: string) => {\n    return leven(cmd, cmdName) < cmd.length * 0.4;\n  });\n  let errorMsg = `Unrecognized command \"${chalk.bold(cmdName)}\".`;\n  if (suggestion) {\n    errorMsg += ` Did you mean \"${suggestion}\"?`;\n  }\n  if (cmdName) {\n    logger.error(errorMsg);\n    logger.info(\n      `Run ${chalk.bold(\n        '\"react-native --help\"',\n      )} to see a list of all available commands.`,\n    );\n  } else {\n    commander.outputHelp();\n  }\n}\n\n/**\n * Custom type assertion needed for the `makeCommand` conditional\n * types to be properly resolved.\n */\nconst isDetachedCommand = (\n  command: Command<boolean>,\n): command is Command<true> => {\n  return command.detached === true;\n};\n\n/**\n * Attaches a new command onto global `commander` instance.\n *\n * Note that this function takes additional argument of `Config` type in case\n * passed `command` needs it for its execution.\n */\nfunction attachCommand<IsDetached extends boolean>(\n  command: Command<IsDetached>,\n  ...rest: IsDetached extends false ? [Config] : []\n): void {\n  const options = command.options || [];\n  const cmd = commander\n    .command(command.name)\n    .action(async function handleAction(\n      this: commander.Command,\n      ...args: string[]\n    ) {\n      const passedOptions = this.opts();\n      const argv = Array.from(args).slice(0, -1);\n\n      try {\n        assertRequiredOptions(options, passedOptions);\n        if (isDetachedCommand(command)) {\n          await command.func(argv, passedOptions);\n        } else {\n          await command.func(argv, rest[0] as Config, passedOptions);\n        }\n      } catch (error) {\n        handleError(error);\n      }\n    });\n\n  if (command.description) {\n    cmd.description(command.description);\n  }\n\n  cmd.helpInformation = printHelpInformation.bind(\n    cmd,\n    command.examples,\n    command.pkg,\n  );\n\n  for (const opt of command.options || []) {\n    cmd.option(\n      opt.name,\n      opt.description,\n      opt.parse || ((val: any) => val),\n      typeof opt.default === 'function'\n        ? opt.default(rest[0] as Config)\n        : opt.default,\n    );\n  }\n}\n\nasync function run() {\n  try {\n    await setupAndRun();\n  } catch (e) {\n    handleError(e);\n  }\n}\n\nasync function setupAndRun() {\n  // Commander is not available yet\n  logger.setVerbose(process.argv.includes('--verbose'));\n\n  // We only have a setup script for UNIX envs currently\n  if (process.platform !== 'win32') {\n    const scriptName = 'setup_env.sh';\n    const absolutePath = path.join(__dirname, '..', scriptName);\n\n    try {\n      childProcess.execFileSync(absolutePath, {stdio: 'pipe'});\n    } catch (error) {\n      logger.warn(\n        `Failed to run environment setup script \"${scriptName}\"\\n\\n${chalk.red(\n          error,\n        )}`,\n      );\n      logger.info(\n        `React Native CLI will continue to run if your local environment matches what React Native expects. If it does fail, check out \"${absolutePath}\" and adjust your environment to match it.`,\n      );\n    }\n  }\n\n  for (const command of detachedCommands) {\n    attachCommand(command);\n  }\n\n  try {\n    // when we run `config`, we don't want to output anything to the console. We\n    // expect it to return valid JSON\n    if (process.argv.includes('config')) {\n      logger.disable();\n    }\n\n    const ctx = loadConfig();\n\n    logger.enable();\n\n    for (const command of [...projectCommands, ...ctx.commands]) {\n      attachCommand(command, ctx);\n    }\n  } catch (e) {\n    logger.enable();\n    logger.debug(e.message);\n    logger.debug(\n      'Failed to load configuration of your project. Only a subset of commands will be available.',\n    );\n  }\n\n  commander.parse(process.argv);\n\n  if (commander.rawArgs.length === 2) {\n    commander.outputHelp();\n  }\n\n  // We handle --version as a special case like this because both `commander`\n  // and `yargs` append it to every command and we don't want to do that.\n  // E.g. outside command `init` has --version flag and we want to preserve it.\n  if (commander.args.length === 0 && commander.rawArgs.includes('--version')) {\n    console.log(pkgJson.version);\n  }\n}\n\nconst bin = require.resolve('./bin');\n\nexport {run, init, bin};\n"]}