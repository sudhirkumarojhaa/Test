{"version":3,"sources":["../../../src/commands/init/templateName.ts"],"names":["FILE_PROTOCOL","TARBALL","VERSION_POSTFIX","VERSIONED_PACKAGE","handleFileProtocol","filePath","uri","URL","pathname","process","platform","substring","fs","existsSync","CLIError","packageJsonPath","path","join","packageJson","JSON","parse","readFileSync","encoding","name","handleTarball","nameWithVersion","basename","tarballVersionMatch","match","handleVersionedPackage","versionedPackage","versionedPackageMatch","processTemplateName","templateName"],"mappings":"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","sourcesContent":["import path from 'path';\nimport {URL} from 'url';\nimport fs from 'fs';\nimport {CLIError} from '@react-native-community/cli-tools';\n\nconst FILE_PROTOCOL = /file:/;\nconst TARBALL = /\\.tgz$/;\nconst VERSION_POSTFIX = /(.*)(-\\d+\\.\\d+\\.\\d+)/;\nconst VERSIONED_PACKAGE = /(@?.+)(@)(.+)/;\n\nfunction handleFileProtocol(filePath: string) {\n  let uri = new URL(filePath).pathname;\n  if (process.platform === 'win32') {\n    // On Windows, the pathname has an extra / at the start, so remove that\n    uri = uri.substring(1);\n  }\n  if (!fs.existsSync(uri)) {\n    throw new CLIError(\n      `Failed to retrieve template name. The specified template directory path \"${uri}\" does not exist or is invalid.`,\n    );\n  }\n  const packageJsonPath = path.join(uri, 'package.json');\n  let packageJson;\n  try {\n    packageJson = JSON.parse(\n      fs.readFileSync(packageJsonPath, {encoding: 'utf8'}),\n    );\n  } catch {\n    throw new CLIError(\n      'Failed to retrieve template name. We expect the template directory to include \"package.json\" file, but it was not found.',\n    );\n  }\n\n  if (!packageJson || !packageJson.name) {\n    throw new CLIError(\n      `Failed to retrieve template name. We expect the \"package.json\" of the template to include the \"name\" property, but we found \"${\n        packageJson ? packageJson.name : 'undefined'\n      }\" which is invalid.`,\n    );\n  }\n  return {\n    uri,\n    name: packageJson.name,\n  };\n}\n\nfunction handleTarball(filePath: string) {\n  if (!fs.existsSync(filePath)) {\n    throw new CLIError(\n      `Failed to retrieve tarball name. The specified tarball path \"${filePath}\" does not exist or is invalid.`,\n    );\n  }\n  const nameWithVersion = path.parse(path.basename(filePath)).name;\n  const tarballVersionMatch = nameWithVersion.match(VERSION_POSTFIX);\n  if (!tarballVersionMatch) {\n    throw new CLIError(\n      `Failed to retrieve tarball name. We expect the tarball to include package name and version, e.g.: \"template-name-1.2.3-rc.0.tgz\", but received: \"${nameWithVersion}\".`,\n    );\n  }\n\n  return {\n    uri: filePath,\n    name: tarballVersionMatch[1],\n  };\n}\n\nfunction handleVersionedPackage(versionedPackage: string) {\n  const versionedPackageMatch = versionedPackage.match(VERSIONED_PACKAGE);\n  if (!versionedPackageMatch) {\n    throw new CLIError(\n      `Failed to retrieve package name. We expect the package to include name and version, e.g.: \"template-name@1.2.3-rc.0\", but received: \"${versionedPackage}\".`,\n    );\n  }\n  return {\n    uri: versionedPackage,\n    name: versionedPackageMatch[1],\n  };\n}\n\nexport function processTemplateName(templateName: string) {\n  if (templateName.match(TARBALL)) {\n    return handleTarball(templateName);\n  }\n  if (templateName.match(FILE_PROTOCOL)) {\n    return handleFileProtocol(templateName);\n  }\n  if (templateName.match(VERSIONED_PACKAGE)) {\n    return handleVersionedPackage(templateName);\n  }\n\n  return {\n    uri: templateName,\n    name: templateName,\n  };\n}\n"]}