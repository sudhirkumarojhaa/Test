{"version":3,"sources":["../../../../src/commands/doctor/healthchecks/python.ts"],"names":["label","getDiagnostics","Languages","needsToBeFixed","version","Python","versionRange","versionRanges","PYTHON","win32AutomaticFix","loader","arch","process","installerUrl","installPath","env","LOCALAPPDATA","start","installer","text","command","succeed","e","fail","runAutomaticFix","healthcheck","url"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;;AACA;;AAGA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;;;;eAEe;AACbA,EAAAA,KAAK,EAAE,QADM;AAEbC,EAAAA,cAAc,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,MAAwB;AACtCC,IAAAA,cAAc,EAAE,kDAA0B;AACxCC,MAAAA,OAAO,EACL,OAAOF,SAAS,CAACG,MAAjB,KAA4B,QAA5B,GACIH,SAAS,CAACG,MADd,GAEIH,SAAS,CAACG,MAAV,CAAiBD,OAJiB;AAKxCE,MAAAA,YAAY,EAAEC,uBAAcC;AALY,KAA1B,CADsB;AAStCJ,IAAAA,OAAO,EACL,OAAOF,SAAS,CAACG,MAAjB,KAA4B,QAA5B,GACIH,SAAS,CAACG,MADd,GAEIH,SAAS,CAACG,MAAV,CAAiBD,OAZe;AAatCE,IAAAA,YAAY,EAAEC,uBAAcC;AAbU,GAAxB,CAFH;AAiBbC,EAAAA,iBAAiB,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,KAAmC;AACpD,QAAI;AACF,YAAMC,IAAI,GAAGC,OAAO,CAACD,IAAR,KAAiB,KAAjB,GAAyB,QAAzB,GAAoC,EAAjD;AACA,YAAME,YAAY,GAAI,wDAAuDF,IAAK,KAAlF;AACA,YAAMG,WAAW,GAAG,kBAAKF,OAAO,CAACG,GAAR,CAAYC,YAAZ,IAA4B,EAAjC,EAAqC,SAArC,CAApB;AAEAN,MAAAA,MAAM,CAACO,KAAP,CAAc,sCAAqCJ,YAAa,GAAhE;AAEA,YAAMK,SAAS,GAAG,MAAM,6BAAYL,YAAZ,CAAxB;AAEAH,MAAAA,MAAM,CAACS,IAAP,GAAe,yBAAwBL,WAAY,GAAnD;AACA,YAAMM,OAAO,GAAI,mBAAkBF,SAAU,gBAAeJ,WAAY,6BAAxE;AAEA,YAAM,uCAAeM,OAAf,CAAN;AAEAV,MAAAA,MAAM,CAACS,IAAP,GAAc,gCAAd;AAEA,YAAM,6CAAkB,MAAlB,EAA0BL,WAA1B,CAAN;AACA,YAAM,6CAAkB,MAAlB,EAA0B,kBAAKA,WAAL,EAAkB,SAAlB,CAA1B,CAAN;AAEAJ,MAAAA,MAAM,CAACW,OAAP,CAAe,+BAAf;AACD,KApBD,CAoBE,OAAOC,CAAP,EAAU;AACVZ,MAAAA,MAAM,CAACa,IAAP,CAAYD,CAAZ;AACD;AACF,GAzCY;AA0CbE,EAAAA,eAAe,EAAE,YAAY;AAC3B;;;;;AAKA,uCAAsB;AACpBC,MAAAA,WAAW,EAAE,QADO;AAEpBC,MAAAA,GAAG,EAAE;AAFe,KAAtB;AAID;AApDY,C","sourcesContent":["import {fetchToTemp} from '@react-native-community/cli-tools';\nimport versionRanges from '../versionRanges';\nimport {doesSoftwareNeedToBeFixed} from '../checkInstallation';\nimport {logManualInstallation} from './common';\nimport {HealthCheckInterface} from '../types';\n\nimport {updateEnvironment} from '../../../tools/environmentVariables';\nimport {join} from 'path';\nimport {Ora} from 'ora';\nimport {executeCommand} from '../../../tools/executeWinCommand';\n\nexport default {\n  label: 'Python',\n  getDiagnostics: async ({Languages}) => ({\n    needsToBeFixed: doesSoftwareNeedToBeFixed({\n      version:\n        typeof Languages.Python === 'string'\n          ? Languages.Python\n          : Languages.Python.version,\n      versionRange: versionRanges.PYTHON,\n    }),\n\n    version:\n      typeof Languages.Python === 'string'\n        ? Languages.Python\n        : Languages.Python.version,\n    versionRange: versionRanges.PYTHON,\n  }),\n  win32AutomaticFix: async ({loader}: {loader: Ora}) => {\n    try {\n      const arch = process.arch === 'x64' ? 'amd64.' : '';\n      const installerUrl = `https://www.python.org/ftp/python/2.7.9/python-2.7.9.${arch}msi`;\n      const installPath = join(process.env.LOCALAPPDATA || '', 'python2');\n\n      loader.start(`Downloading Python installer from \"${installerUrl}\"`);\n\n      const installer = await fetchToTemp(installerUrl);\n\n      loader.text = `Installing Python in \"${installPath}\"`;\n      const command = `msiexec.exe /i \"${installer}\" TARGETDIR=\"${installPath}\" /qn /L*P \"python-log.txt\"`;\n\n      await executeCommand(command);\n\n      loader.text = 'Updating environment variables';\n\n      await updateEnvironment('PATH', installPath);\n      await updateEnvironment('PATH', join(installPath, 'scripts'));\n\n      loader.succeed('Python installed successfully');\n    } catch (e) {\n      loader.fail(e);\n    }\n  },\n  runAutomaticFix: async () => {\n    /**\n     * Python is only needed on Windows so this method should never be called.\n     * Leaving it in case that changes and as an example of how to have a\n     * fallback.\n     */\n    logManualInstallation({\n      healthcheck: 'Python',\n      url: 'https://www.python.org/downloads/',\n    });\n  },\n} as HealthCheckInterface;\n"]}