{"version":3,"sources":["../../../../src/commands/doctor/healthchecks/iosDeploy.ts"],"names":["label","installationWithYarn","installationWithNpm","identifyInstallationCommand","packageManager","PACKAGE_MANAGERS","YARN","NPM","undefined","installLibrary","installationCommand","packageManagerToUse","loader","start","installationCommandArgs","split","splice","succeed","error","healthcheck","command","isRequired","description","getDiagnostics","needsToBeFixed","runAutomaticFix","stop","promptQuestion","chalk","bold","reset","installWithYarn","installWithNpm","skipInstallation","chosenPackageManager","inquirer","prompt","type","name","message","choices","fail","url","shouldInstallWithYarn","toLowerCase"],"mappings":"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","sourcesContent":["import execa from 'execa';\nimport chalk from 'chalk';\n// @ts-ignore untyped\nimport inquirer from 'inquirer';\nimport {isSoftwareNotInstalled, PACKAGE_MANAGERS} from '../checkInstallation';\nimport {packageManager} from './packageManagers';\nimport {logManualInstallation, logError, removeMessage} from './common';\nimport {HealthCheckInterface} from '../types';\nimport {Ora} from 'ora';\n\nconst label = 'ios-deploy';\n\nconst installationWithYarn = 'yarn global add ios-deploy';\nconst installationWithNpm = 'npm install ios-deploy --global';\n\nconst identifyInstallationCommand = () => {\n  if (packageManager === PACKAGE_MANAGERS.YARN) {\n    return installationWithYarn;\n  }\n\n  if (packageManager === PACKAGE_MANAGERS.NPM) {\n    return installationWithNpm;\n  }\n\n  return undefined;\n};\n\nconst installLibrary = async ({\n  installationCommand,\n  packageManagerToUse,\n  loader,\n}: {\n  installationCommand: string;\n  packageManagerToUse: 'yarn' | 'npm';\n  loader: Ora;\n}) => {\n  try {\n    loader.start(`${label} (installing with ${packageManagerToUse})`);\n\n    const installationCommandArgs = installationCommand.split(' ');\n\n    await execa(installationCommandArgs[0], installationCommandArgs.splice(1));\n\n    loader.succeed(`${label} (installed with ${packageManagerToUse})`);\n  } catch (error) {\n    logError({\n      healthcheck: label,\n      loader,\n      error,\n      command: installationCommand,\n    });\n  }\n};\n\nexport default {\n  label,\n  isRequired: false,\n  description:\n    'Required for installing your app on a physical device with the CLI',\n  getDiagnostics: async () => ({\n    needsToBeFixed: await isSoftwareNotInstalled('ios-deploy'),\n  }),\n  runAutomaticFix: async ({loader}) => {\n    loader.stop();\n\n    const installationCommand = identifyInstallationCommand();\n\n    // This means that we couldn't \"guess\" the package manager\n    if (installationCommand === undefined) {\n      const promptQuestion = `ios-deploy needs to be installed either by ${chalk.bold(\n        'yarn',\n      )} ${chalk.reset('or')} ${chalk.bold(\n        'npm',\n      )} ${chalk.reset()}, which one do you want to use?`;\n      const installWithYarn = 'yarn';\n      const installWithNpm = 'npm';\n      const skipInstallation = 'Skip installation';\n\n      const {chosenPackageManager} = await inquirer.prompt([\n        {\n          type: 'list',\n          name: 'chosenPackageManager',\n          message: promptQuestion,\n          choices: [installWithYarn, installWithNpm, skipInstallation],\n        },\n      ]);\n\n      removeMessage(`? ${promptQuestion} ${chosenPackageManager}`);\n\n      if (chosenPackageManager === skipInstallation) {\n        loader.fail();\n\n        // Then we just print out the URL that the user can head to download the library\n        logManualInstallation({\n          healthcheck: 'ios-deploy',\n          url: 'https://github.com/ios-control/ios-deploy#readme',\n        });\n\n        return;\n      }\n\n      const shouldInstallWithYarn = chosenPackageManager === installWithYarn;\n\n      return installLibrary({\n        installationCommand: shouldInstallWithYarn\n          ? installationWithYarn\n          : installationWithNpm,\n        loader,\n        packageManagerToUse: chosenPackageManager,\n      });\n    }\n\n    return installLibrary({\n      installationCommand,\n      packageManagerToUse: packageManager!.toLowerCase() as 'yarn' | 'npm',\n      loader,\n    });\n  },\n} as HealthCheckInterface;\n"]}