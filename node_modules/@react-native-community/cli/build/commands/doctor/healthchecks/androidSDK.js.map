{"version":3,"sources":["../../../../src/commands/doctor/healthchecks/androidSDK.ts"],"names":["getBuildToolsVersion","projectRoot","gradleBuildFilePath","path","join","buildToolsVersionEntry","fs","existsSync","gradleBuildFile","readFileSync","buildToolsVersionIndex","indexOf","buildToolsVersion","substring","split","match","installMessage","chalk","dim","label","description","getDiagnostics","SDKs","requiredVersion","buildTools","isAndroidSDKInstalled","Array","isArray","isRequiredVersionInstalled","includes","versions","versionRange","needsToBeFixed","runAutomaticFix","loader","environmentInfo","version","isSDKInstalled","fail","message","healthcheck","url"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AAEA;;;;AAEA,MAAMA,oBAAoB,GAAG,MAAc;AACzC;AACA,QAAMC,WAAW,GAAG,+BAApB;;AACA,QAAMC,mBAAmB,GAAGC,gBAAKC,IAAL,CAAUH,WAAV,EAAuB,sBAAvB,CAA5B;;AAEA,QAAMI,sBAAsB,GAAG,mBAA/B;;AAEA,MAAI,CAACC,cAAGC,UAAH,CAAcL,mBAAd,CAAL,EAAyC;AACvC,WAAO,WAAP;AACD,GATwC,CAWzC;;;AACA,QAAMM,eAAe,GAAGF,cAAGG,YAAH,CAAgBP,mBAAhB,EAAqC,OAArC,CAAxB;;AAEA,QAAMQ,sBAAsB,GAAGF,eAAe,CAACG,OAAhB,CAC7BN,sBAD6B,CAA/B;AAIA,QAAMO,iBAAiB,GAAG,CACxBJ,eAAe,CACb;AADa,GAEZK,SAFH,CAEaH,sBAFb,EAGGI,KAHH,CAGS,IAHT,EAGe,CAHf,EAIE;AAJF,GAKGC,KALH,CAKS,SALT,KAKuB,EANC,EAOxBX,IAPwB,CAOnB,EAPmB,CAA1B;AASA,SAAOQ,iBAAiB,IAAI,WAA5B;AACD,CA5BD;;AA8BA,MAAMI,cAAc,GAAI,gDAA+CC,iBAAMC,GAAN,CACrE,sCADqE,CAErE,EAFF;eAIe;AACbC,EAAAA,KAAK,EAAE,aADM;AAEbC,EAAAA,WAAW,EAAE,0DAFA;AAGbC,EAAAA,cAAc,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,KAAkB;AAChC,UAAMC,eAAe,GAAGvB,oBAAoB,EAA5C;AACA,UAAMwB,UAAU,GACd,OAAOF,IAAI,CAAC,aAAD,CAAX,KAA+B,QAA/B,GACIA,IAAI,CAAC,aAAD,CADR,GAEIA,IAAI,CAAC,aAAD,CAAJ,CAAoB,aAApB,CAHN;AAKA,UAAMG,qBAAqB,GAAGC,KAAK,CAACC,OAAN,CAAcH,UAAd,CAA9B;AAEA,UAAMI,0BAA0B,GAAGH,qBAAqB,GACpDD,UAAU,CAACK,QAAX,CAAoBN,eAApB,CADoD,GAEpD,KAFJ;AAIA,WAAO;AACLO,MAAAA,QAAQ,EAAEL,qBAAqB,GAAGD,UAAH,GAAgBF,IAAI,CAAC,aAAD,CAD9C;AAELS,MAAAA,YAAY,EAAER,eAFT;AAGLS,MAAAA,cAAc,EAAE,CAACJ;AAHZ,KAAP;AAKD,GArBY;AAsBbK,EAAAA,eAAe,EAAE,OAAO;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAP,KAAqC;AACpD,UAAMC,OAAO,GAAGD,eAAe,CAACb,IAAhB,CAAqB,aAArB,CAAhB;AACA,UAAMe,cAAc,GAAGD,OAAO,KAAK,WAAnC;AAEAF,IAAAA,MAAM,CAACI,IAAP;;AAEA,QAAID,cAAJ,EAAoB;AAClB,aAAO,mCAAsB;AAC3BE,QAAAA,OAAO,EAAEvB;AADkB,OAAtB,CAAP;AAGD;;AAED,WAAO,mCAAsB;AAC3BwB,MAAAA,WAAW,EAAE,aADc;AAE3BC,MAAAA,GAAG,EAAE;AAFsB,KAAtB,CAAP;AAID;AAtCY,C","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport {logManualInstallation} from './common';\nimport {HealthCheckInterface} from '../types';\nimport findProjectRoot from '../../../tools/config/findProjectRoot';\n\nconst getBuildToolsVersion = (): string => {\n  // TODO use config\n  const projectRoot = findProjectRoot();\n  const gradleBuildFilePath = path.join(projectRoot, 'android/build.gradle');\n\n  const buildToolsVersionEntry = 'buildToolsVersion';\n\n  if (!fs.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  }\n\n  // Read the content of the `build.gradle` file\n  const gradleBuildFile = fs.readFileSync(gradleBuildFilePath, 'utf-8');\n\n  const buildToolsVersionIndex = gradleBuildFile.indexOf(\n    buildToolsVersionEntry,\n  );\n\n  const buildToolsVersion = (\n    gradleBuildFile\n      // Get only the portion of the declaration of `buildToolsVersion`\n      .substring(buildToolsVersionIndex)\n      .split('\\n')[0]\n      // Get only the the value of `buildToolsVersion`\n      .match(/\\d|\\../g) || []\n  ).join('');\n\n  return buildToolsVersion || 'Not Found';\n};\n\nconst installMessage = `Read more about how to update Android SDK at ${chalk.dim(\n  'https://developer.android.com/studio',\n)}`;\n\nexport default {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: async ({SDKs}) => {\n    const requiredVersion = getBuildToolsVersion();\n    const buildTools =\n      typeof SDKs['Android SDK'] === 'string'\n        ? SDKs['Android SDK']\n        : SDKs['Android SDK']['Build Tools'];\n\n    const isAndroidSDKInstalled = Array.isArray(buildTools);\n\n    const isRequiredVersionInstalled = isAndroidSDKInstalled\n      ? buildTools.includes(requiredVersion)\n      : false;\n\n    return {\n      versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n      versionRange: requiredVersion,\n      needsToBeFixed: !isRequiredVersionInstalled,\n    };\n  },\n  runAutomaticFix: async ({loader, environmentInfo}) => {\n    const version = environmentInfo.SDKs['Android SDK'];\n    const isSDKInstalled = version !== 'Not Found';\n\n    loader.fail();\n\n    if (isSDKInstalled) {\n      return logManualInstallation({\n        message: installMessage,\n      });\n    }\n\n    return logManualInstallation({\n      healthcheck: 'Android SDK',\n      url: 'https://reactnative.dev/docs/getting-started',\n    });\n  },\n} as HealthCheckInterface;\n"]}