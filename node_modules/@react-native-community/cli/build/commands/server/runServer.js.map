{"version":3,"sources":["../../../src/commands/server/runServer.ts"],"names":["runServer","_argv","ctx","args","eventsSocket","terminal","Terminal","process","stdout","ReporterImpl","getReporterImpl","customLogReporterPath","terminalReporter","reporter","update","event","reportEvent","metroConfig","config","maxWorkers","port","resetCache","watchFolders","projectRoot","sourceExts","assetPlugins","transformer","map","plugin","require","resolve","middlewareManager","MiddlewareManager","host","server","forEach","serveStatic","bind","customEnhanceMiddleware","enhanceMiddleware","middleware","getConnectInstance","use","serverInstance","Metro","secure","https","secureCert","cert","secureKey","key","hmrEnabled","wsProxy","webSocketProxy","attachToServer","ms","messageSocket","eventsSocketModule","attachDevToolsSocket","interactive","_req","res","broadcast","end","keepAliveTimeout","root","undefined","e","code","path"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore untyped metro\nimport Metro from 'metro';\n// @ts-ignore untyped metro\nimport {Terminal} from 'metro-core';\nimport http from 'http';\nimport path from 'path';\nimport {Config} from '@react-native-community/cli-types';\nimport messageSocket from './messageSocket';\nimport eventsSocketModule from './eventsSocket';\nimport webSocketProxy from './webSocketProxy';\nimport MiddlewareManager from './middleware/MiddlewareManager';\nimport loadMetroConfig from '../../tools/loadMetroConfig';\nimport releaseChecker from '../../tools/releaseChecker';\nimport enableWatchMode from './watchMode';\n\nexport type Args = {\n  assetPlugins?: string[];\n  cert?: string;\n  customLogReporterPath?: string;\n  host?: string;\n  https?: boolean;\n  maxWorkers?: number;\n  key?: string;\n  platforms?: string[];\n  port?: number;\n  resetCache?: boolean;\n  sourceExts?: string[];\n  transformer?: string;\n  verbose?: boolean;\n  watchFolders?: string[];\n  config?: string;\n  projectRoot?: string;\n  interactive: boolean;\n};\n\nasync function runServer(_argv: Array<string>, ctx: Config, args: Args) {\n  let eventsSocket:\n    | ReturnType<typeof eventsSocketModule.attachToServer>\n    | undefined;\n  const terminal = new Terminal(process.stdout);\n  const ReporterImpl = getReporterImpl(args.customLogReporterPath);\n  const terminalReporter = new ReporterImpl(terminal);\n  const reporter = {\n    update(event: any) {\n      terminalReporter.update(event);\n      if (eventsSocket) {\n        eventsSocket.reportEvent(event);\n      }\n    },\n  };\n\n  const metroConfig = await loadMetroConfig(ctx, {\n    config: args.config,\n    maxWorkers: args.maxWorkers,\n    port: args.port,\n    resetCache: args.resetCache,\n    watchFolders: args.watchFolders,\n    projectRoot: args.projectRoot,\n    sourceExts: args.sourceExts,\n    reporter,\n  });\n\n  if (args.assetPlugins) {\n    metroConfig.transformer.assetPlugins = args.assetPlugins.map(plugin =>\n      require.resolve(plugin),\n    );\n  }\n\n  const middlewareManager = new MiddlewareManager({\n    host: args.host,\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders,\n  });\n\n  metroConfig.watchFolders.forEach(\n    middlewareManager.serveStatic.bind(middlewareManager),\n  );\n\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n\n  metroConfig.server.enhanceMiddleware = (middleware: any, server: unknown) => {\n    if (customEnhanceMiddleware) {\n      middleware = customEnhanceMiddleware(middleware, server);\n    }\n\n    return middlewareManager.getConnectInstance().use(middleware);\n  };\n\n  const serverInstance = await Metro.runServer(metroConfig, {\n    host: args.host,\n    secure: args.https,\n    secureCert: args.cert,\n    secureKey: args.key,\n    hmrEnabled: true,\n  });\n\n  const wsProxy = webSocketProxy.attachToServer(\n    serverInstance,\n    '/debugger-proxy',\n  );\n  const ms = messageSocket.attachToServer(serverInstance, '/message');\n  eventsSocket = eventsSocketModule.attachToServer(\n    serverInstance,\n    '/events',\n    ms,\n  );\n\n  middlewareManager.attachDevToolsSocket(wsProxy);\n  middlewareManager.attachDevToolsSocket(ms);\n\n  if (args.interactive) {\n    enableWatchMode(ms);\n  }\n\n  middlewareManager\n    .getConnectInstance()\n    .use('/reload', (_req: http.IncomingMessage, res: http.ServerResponse) => {\n      ms.broadcast('reload');\n      res.end('OK');\n    });\n\n  // In Node 8, the default keep-alive for an HTTP connection is 5 seconds. In\n  // early versions of Node 8, this was implemented in a buggy way which caused\n  // some HTTP responses (like those containing large JS bundles) to be\n  // terminated early.\n  //\n  // As a workaround, arbitrarily increase the keep-alive from 5 to 30 seconds,\n  // which should be enough to send even the largest of JS bundles.\n  //\n  // For more info: https://github.com/nodejs/node/issues/13391\n  //\n  serverInstance.keepAliveTimeout = 30000;\n\n  await releaseChecker(ctx.root);\n}\n\nfunction getReporterImpl(customLogReporterPath: string | undefined) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n  try {\n    // First we let require resolve it, so we can require packages in node_modules\n    // as expected. eg: require('my-package/reporter');\n    return require(customLogReporterPath);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n    // If that doesn't work, then we next try relative to the cwd, eg:\n    // require('./reporter');\n    return require(path.resolve(customLogReporterPath));\n  }\n}\n\nexport default runServer;\n"]}